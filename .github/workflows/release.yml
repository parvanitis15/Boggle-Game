name: Release

on:
  push:
    tags:
      - 'v*'

# Add permissions at the top level
permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    # You can also set permissions at the job level if needed
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build-and-release:
    needs: create-release
    name: Build and Release ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            asset_name: boggle_solver-linux
            executable_path: build/boggle_solver
          - os: macos-latest
            name: macos
            asset_name: boggle_solver-macos
            executable_path: build/boggle_solver
          - os: windows-latest
            name: windows
            asset_name: boggle_solver-windows.exe
            executable_path: build/Release/boggle_solver.exe

    steps:
    - uses: actions/checkout@v3

    - name: Setup CMake
      uses: lukka/get-cmake@latest

    - name: Setup GTest (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtest-dev
        cd /usr/src/gtest
        sudo cmake CMakeLists.txt
        sudo make
        sudo cp lib/*.a /usr/lib

    - name: Setup GTest (macOS)
      if: matrix.os == 'macos-latest'
      run: brew install googletest

    - name: Setup GTest (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        ./bootstrap-vcpkg.bat
        ./vcpkg install gtest
        cd ..
      shell: bash

    - name: Configure CMake (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="$GITHUB_WORKSPACE/vcpkg/scripts/buildsystems/vcpkg.cmake"
      shell: bash

    - name: Build
      run: cmake --build build --config Release

    - name: Run Tests
      working-directory: build
      run: ctest --output-on-failure -C Release

    - name: Package Application
      run: |
        mkdir -p package
        if [ -f "${{ matrix.executable_path }}" ]; then
          cp "${{ matrix.executable_path }}" package/${{ matrix.asset_name }}
        else
          echo "Executable not found at expected path: ${{ matrix.executable_path }}"
          echo "Listing build directory contents:"
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            find build -type f -name "*.exe" | sort
          else
            find build -type f -executable | grep -v "\.o$\|\.a$\|\.so$\|CMake" | sort
          fi
          exit 1
        fi
      shell: bash

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./package/${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream 
